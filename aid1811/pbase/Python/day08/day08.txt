day07回顾
　两个容器:
    元组 tuple , 字典dict
元组的创建:
    ()  20, (20,) (1,2,3) 1,2,3
    构造函数tuple() tuple(可迭代对象)

    运算:
        ＋　+= * *=
    比较> >= < <= == !=
    同列表的比较规则完全相同
    in /not in 运算
    索引,切片
    t[1]    t[1:10:2]
元组的方法:
    T.index(v[,begin[,end]])返回对应元素的索引下标,begin为开始索引，end为结束索引,当v不存在时出发ValueError类型错误
    T.count(x)  返回元组中对应的元素个数

字典 dict
    可变的，无序的，容器
    键key  　　　　　　- 值(value) 对
    (不可变对象)　　　　　　（任意可变类型）
    
    字典的创建方式
    字面值
    {},
    构造函数
    dict(),dict(两个可迭代对象的序列(n):
    x = 0
    x1=0
    for y in range(1,n+1):
        x = 1/y
        x1+=x
    return x1
print(fun(2))ict(关键字传参) d = dict(a=1,b=2)
    推导式　
    {键表达式:值表达式 for 变量1 in (n):
    x = 0
    x1=0
    for y in range(1,n+1):
        x = 1/y
        x1+=x
    return x1
print(fun(2))代对象１　if 值表达式}

    添加和修改字典的键- 值对
        d[键]　＝值表达式
    删除字典的键
        del d[键]
    查看字典的键对象的值
        value = d[键]
    字典是可迭代对象(可以迭代取出字典的键)

    可迭代对象能用在什么地方
        for 变量 in 可迭代对象:
            ...
        推导式
        [表达式 for 变量 in 可迭代对象]
    in  /not in 运算
    比较运算:
        == !=
    函数:
        len(seq) 返回序列的长度
        max(x)返回序列的最大值元素（要求每两个元素都能比较大小）
        min(x)返回序列的最小值元素
        sum(x)返回序列中所有元素的和(元素必须是数值类型)
        any(x)真值测试，如果列表中其中一个值为真值，则返回Ｔrue
        all(x)真值测试，如果列表中所有值都为真值才返回Ｔrue，否则返回　False
    方法:
        D.clear()　
        D.pop(key)
        D.copy()浅拷贝 ,如果字典里面还有嵌套来一个字典或列表,可以使用深拷贝
        D.get(key,default= None)默认返回None


day08笔记:
集合set :
    集合是可变的容器
    集合内的数据对象都是唯一的(不能重复多次的)*****************************
    集合是无序的存储结构,集合中的数据没有先后顺序关系
    集合内的元素必须是不可变对象*****************************************
    集合是可迭代对象
    集合是相当于只有键没有值的字典(键则是集合的数据)

创建空集合:
    set()
创建非空集合的字面值:
    s = {1,2,3}
集合的构造(创建)函数 set
    set() 创建一个空集合(注:不能用{}来创建空集合)
    set(iterable)用可迭代对象创建一个新的集合对象
    示例:
    s = set() #s绑定一个空集合
    s = {2,3,5,7}
    s = set("ABCCBA") #s = {'A','B','C'}
    s = set({1:'一',2:'二'}) #s = {1,2} 从字典里面取值，取到的是字典的键
    s = set([1,0,3.14,None]) #s = {1,0,3.14,None}　从列表中取值存储到集合中
    s = set([True,False,1,0,None]) #{True,False,None} #１，０表示True,False
    s = set(("ABC","123",123))  #从元组里面取值 "ABC","123",123
    s = {1,2,[1,2,3]} #中间的[1,2,3]为可变的列表,所以会报错
    s = {1,2{1,2}} #集合也是可变的，所以会报错
集合的运算:
　　交集&  并集| 补集－ 对称补集^ 子集<  超集>
   &生成两个集合的交集 (共同拥有)
   s1 = {1,2,3}
   s2 = {2,3,4}
   s1 & s2 #{2,3}
   | 并集 去重复的
　　s1 = {1,2,3}
   s2 = {2,3,4}
   s1 ｜ s2 #{1,2,3,4}

   - 生成两个集合的补集
   s1 = {1,2,3}
   s2 = {2,3,4}
   s1 - s2 #{1} s1有而s2没有的元素
   s2 - s1 #{4} s2有而s1没有的元素

   ^生成两个结合的对称补集，两个集合没有重复的
   s1 = {1,2,3}
   s2 = {2,3,4}
   s1 ^ s2 #{1,4}

   > 判断一个集合是另一个集合的超集
   < 判断一个集合是另一个集合的子集
   s1 = {1,2,3}
   s2 = {2,3}
   s1 > s2   #True s1是s2的超集 s1中包含了s2的值
   s2 < s1   #True s2是s1的子集　s2中包含了s1的值
   s2 > s1   #False  而s1中出现了一个s2没有的数
   
   == != 集合相同或不同
    s1 = {1,2,3}
    s2 = {3,2,1}
    s1 == s2 #True
    s1 != s1 #False

   其他:
    <= >= &= |= ^=
    &= x=&y 相当于 x = x&y  
    |= x|=y 相当于 x|= x|y
    ^= x^=y 相当于 x^= x^y

    in / not in 运算符
        同列表的in /not in 作用一样
    集合相关的函数:
        len(x) max(x)min(x)sum(x)any(x)all(x)
    练习:

    集合的方法:
    　文档docs_html/set.html
        s.add(e)  s = set()  s.add(1) s.add("hello")在集合中添加一个新的元素e；如果元素已经存在，则不添加
        s.remove(e)  从集合中删除一个元素，如果元素不存在于集合中，则会产生一个KeyError错误
        s.discard(e) 从集合S中移除一个元素e,在元素e不存在时什么都不做;
        S.clear() 清空集合内的所有元素
        S.copy() 浅拷贝
        S.pop() 从集合S中删除一个随机元素;如果此集合为空，则引发KeyError异常,返回被删除的元素
        S.update(s2) 等同于 S |= s2, 用 S与s2得到的全集更新变量S
    
    集合推导式:只有三种推导式,列表，字典，集合*************************************
      集合推导式是用可迭代对象创建集合的表达式

      语法:
        {表达式 for 变量 in 可迭代对象 [if 真值表达式]}
      注：[]括号内的部分可以省略

      示例:
        L = [1,2,3,6,5,4,3,2,1] 
        s = {x **2 for x in L} #重复的就直接扔掉了
        print(s)
    集合推导式的嵌套
        嵌套规则与列表推导式完全相同

固定集合frozenset
    固定集合是不可变的，无序的，含有唯一元素的集合
    固定集合就是不可变的集合
    作用:
        固定集合可以作为字典的键,还可以作为集合的键
    固定集合的构造函数创建 frozenset
    frozenset()　＃创建一个空的固定集合
    frozenset(iterable) 用可迭代对象创建一个固定集合

    示例:
      fz = frozenset()
      fz = frozenset(range(10))
    固定集合的运算:
      &交集  |并集  -补集  ^对称补集  
      &=   |=  -=   ^=
      in /not in 
      > >= < <= == !=
      (以上运算等同于set中的用法)
    固定集合的方法:
        相当于集合的全部方法去掉修改集合的方法


------------------------------------------------------
函数 function
    什么是函数:
        函数是可以重复执行语句块,可以重复调用
        函数是面向过程编程的最小单位
    
    作用:
        1.用于封装语句块,提高代码的重用性
        2.定义用户级别的函数

def 语句
    作用:
        创建一个函数,使用变量绑定这个函数
    语法:
        def 函数名(形参列表):
            语句可(代码块)
    说明:
        1.函数的名字就是语句块的名称
        2.函数名的命名规则与变量名相同(必须为标识符A-Za-z_)
        3.函数名是一个变量(不要轻易对其赋值)
        4.形参列表是用户自定义的变量名,用来接收调用者传入的参数
        5.函数有自己的名字空间,在函数外部不可以访问内部的变量,在函数内部可以访问函数外部的全局变量,但不能用赋值语句修改
        　这些(外部,全局)变量的绑定关系
        6.函数如果不传入参数,参数列表可以为空
        7.语句部分不能为空,如果为空需要填充pass语句

    函数调用:
      语法:
        函数名([实际调用传递参数])
        注:[]代表内部的内容可省略

      说明:
        函数调用是一个表达式
        如果函数内部没有return语句,则函数执行完毕后返回None
      示例
        def.py
        
    return　语句
        语法:
          return[表达式]
          注:[]代表内部内容可以省略
        作用:
          用于函数中,结束当前函数的执行,返回到调用该函数的地方，同时返回一个对象的引用关系
        说明:
          return语句后跟的表达式可以省略，省略后相当于return　None如果函数内部没有return语句
          则函数执行完最后一条语句后返回None(相当于在最后加来一条return None语句)
day06回顾
    列表
       索引和切片
           取值
            v = 列表[整数表达式]
            lst2 = 列表[开始:结束:步长] #返回列表
           赋值
           　列表[整数表达式] = v
            列表[开始:结束：步长]＝　可迭代对象

    del语句
        del 列表[整数表达式]
        del 列表[开始:结束:步长]    
    函数 :
    s = 'ABCDE'
    L = list(s)
        len(seq) 返回序列的长度
        max(x)返回序列的最大值元素（要求每两个元素都能比较大小）
        min(x)返回序列的最小值元素
        sum(x)返回序列中所有元素的和(元素必须是数值类型)
        any(x)真值测试，如果列表中其中一个值为真值，则返回Ｔrue
        all(x)真值测试，如果列表中所有值都为真值才返回Ｔrue，否则返回　False
        reversed(seq) 返回原序列的方向顺序的可迭代对象
        sorted(seq,reversed=False) 默认为升序排序,返回可迭代对象中排序后的对象的列表

    列表的方法:
        L.append(x) #追加
        L.extend(可迭代对象) #作用类似L +=(可迭代对象)

－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
序列分５种容器
str list(可变) tuple bytes bytearray(可变)
day07笔记:
元组　tuple
    1.元组是不可以改变的序列，同list一样,元组可以存放任意类型数据的容器
    2.可以认为，元组是不可变的列表
元组的表达方式:(元组是序列的一种)
    用小括号()括起来,单个元素括起来后加逗号(,)号区分元组还是单个元素
    创建空元组:
    () #创建一个空元组
    创建非空元组:
    t=100,
    t=(200,)
    t=(1,2,3)
    t=100,200,300
    注:type(x)函数可以返回x的类型
元组的错误示例:
    t = (20) t绑定20这个整数，不是元组
    x,y,z = 100,200,300 ＃序列赋值,不是元组
    x,y,z = (100,200,300)　分别赋值（可迭代对象）
    x,y,z =[100,200,300]　分别赋值（可迭代对象）
    x,y,z ='ABC'　分别赋值（可迭代对象）
    x,y = y,x #序列赋值实现交换
元组的构造函数
    tuple()生成一个空的元组,等同于()
    tuple(iterable)用可迭代对象生成一个元组

    示例:
    t = tuple()
    t= tuple("ABC")
    t= tuple(range(1,10,3))
    t=tuple([2,3,5,7])

元组是可迭代对象
    t = tuple("ABC")
    for x in t:
        print(x)
    L　= [x for x in t]

元组的运算(只能与元组操作)
    算术运算:
    + += * *=
    用法等同于字符串的算术运算
    如:
        t=(1,2,3)+(4,5,6)　＃t = (1,2,3,4,5,6)
        t+=(7,8,9) #注:此处t绑定对象的ＩＤ会变化
        t =(1,2,3) *2
        t*=3

元组的in /not in 运算符
    判断一个值是否存在与元组中，如果存在返回True，否则返回False
    (与列表的in  /not in 功能相同))
索引　index
    用法等同于列表的索引
    注:元组不支持索引赋值
切片:
    用法与列表的切片用法相同
    元组的切片返回一个新的元组
    元组不能切片赋值
元组的方法:
    T.index(v[,begin[,end]])返回对应元素的索引下标,begin为开始索引，end为结束索引,当v不存在时出发ValueError类型错误
    T.count(x)  返回元组中对应的元素个数

---------------------总结
序列三种　　
    str　　＃只能放字符串　不可以变
    tuple　　＃可放任意　不可以变
    list    ＃可放任意且可变
    都是容器
        不可变: str,tuple #占用内存少
        可变:list　　　＃占用内存多
    有先后顺序关系
能用于序列的函数总结
    len(seq) 返回序列的长度
    max(x)返回序列的最大值元素（要求每两个元素都能比较大小）
    min(x)返回序列的最小值元素
    sum(x)返回序列中所有元素的和(元素必须是数值类型)
    any(x)真值测试，如果列表中其中一个值为真值，则返回Ｔrue
    all(x)真值测试，如果列表中所有值都为真值才返回Ｔrue，否则返回　False
    构造函数:
        str(x) tuple(x) list(x)
        reversed(x) #反转　　sorted(x,reversed=False) #排序

字典dict
　　什么是字典
    1.字典是一种可变的容器,可以存储任意类型的容器
    2.字典中的每个数据都是用"键"(key)进行索引，而不向序列（字符串,列表等)可以用整数下表进行索引
    3.字典内的数据没有先后顺序关系,字典的存储是无序的
    4.字典中的数据以键(key)-值(value) 对的形式进行映射存储
    5.字典的键不能重复(重复只保留一个)，且只能用不可变类型作为字典的键　　＊＊＊＊＊＊＊

字典的字面值表示方式：
    字典是以{}括起来,以毛号(:)分隔键值对,各键-值对之间用逗号分隔
穿件空字典:字典的键不能重复，且只能用不可变类型作为字典的键*******
    d={}
创建非空字典:字典的键不能重复，且只能用不可变类型作为字典的键*******
    d={'姓名':'tarena','年龄'：15}
    d = {1:'一',2:'二',3:'三'}
    d={'a':{'b':100,'c':200}}
    d = {'name':None}
    d = {tuple(range(3)):list(range(4))}
    d = {1:'壹',2:'贰',5:'伍',1:'壹'}　＃重复只保留一个
字典的构造函数dict
    dict()#创建一个空的字典　等同于{}
    dict(iterable)用可迭代对象初始化一个字典
    dict(**kwargs)　关键字传参形式生成一个字典
    示例:
    d = dict() #d = {}
    L = [(1,2),[3,4],"AB"]
    d = dict(L) #d = {1:2,3:4,'A':'B'}
    d = dict(name='tarena',age=15) ## {'age' :15,'name':'tarena'}
    注:
    　关键字传参时，关键字的名字必须是符合标识符命名规则的字符串（只能是变量名）

字典的键(key)必须是不可变类型:
    bool,int,float,complex,str,tuple,frozenset(固定集合)和bytes(字节串)(后面学)
    和None对象
可变的数据类型
    list,dict,set(集合),bytearray(字节数组)
字典的键索引
    用[]运算符可以获取字典内"键"对应的值
    语法:
        v=字典[键]
    示例:
        d={'name':'tarena','age':20}
        print(d['name'],'今年',d['age'],'岁'])
添加和修改字典的元素
    语法:
        字典[键]　＝　值
    说明:
        如果键不存在，创建键，并绑定键对应的值
        键存在，修改键绑定的值
    示例:
        d={}
        d['name'] = 'tarena'  #创建'name'键,对应'tarena'
        d['age']=15           #创建'age'键,绑定15
        d['age']=16             #修改'age',绑定１６
        print(d)    

删除   del语句
    删除字典的键,同时解除与值的绑定关系
    语法:
        del 字典[键]
    示例:
        d ={'name':'tarena','age':15}
        del d ['name'] #删除＇name＇键，并解除'name'与'tarena'关系
字典的成员资格判断　in / not in 运算符可以获取字典
    可以用in　运算符来判断一个键是否存在与字典中,如果存在则返回True，否则返回False
    not in 与 in 结果相反
    示例:
        d = {1:'一'，'aaa':'三个a'}  
        1 in d #True  只判断键是否存在
        '一' in d #False只判断键是否存在
        2 not in d #True只判断键是否存在
        '三个a'　not in d #True只判断键是否存在

练习:
1)写程序,将如下信息形成一个字典seasons
    '键'　　　'值'
     1       '春季有1,2,3月'
     2       '夏季有4,5,6月'
     3       '秋季有7,8,9月'
     4       '冬季有10,11,12月'
2)让用户输入一个整数代表这个季度，打印这个季度的信息,如果用户输入的信息不在字典内，则打印"信息不存在"
    sersons = {1:'春季有1,2,3月',2:'夏季有4,5,6月',3:'秋季有7,8,9月',4:'冬季有10,11,12月'}
    print(sersons)
    x=int(input("请输入整数:"))
    if x in sersons:
        print(sersons[x])
    else :
        print("信息不在")

字典的迭代访问
    字典是可迭代对象,字典只能对键进行迭代访问
    示例:
        d = {'一':1,'二':2,'三':3}
        for x in d
            print(x)
字典的比较:
    > >= < <= == !=
    ==两个字典字典是否完全相同（键相同，值也相同则返回True）
    != 与== 返回值相反

可以用于字典的内建函数:
    len(x) 返回字典的键值对的个数
    max(x) 返回字典的键的最大值
    min(x) 返回字典的键的最小值
    sum(x) 返回字典中所有键的和
    amy(x) 真值测试,如果字典中其中一个键为真，则结果为True
    all(x) 真值测试,如果字典中所有键为真，则返回True

示例:
    d = {0:'零',5:'伍',8:'捌',3:'叁'}
    len(d)  #4
    max(d)  #8
    min(d)  #0
    sum(d)  #13
    any(d)  #True
    all(d)  #False

字典的方法：
    python_base_docs_html/dict.python_base_docs_html
    d.update(d2)  将字典 d2 合并到d中，如果键相同，则此键的值取d2的值作为新值
    D.get(key, default=None) 返回键key所对应的值,如果没有此键，则返回default(默认为None,可以写字符串"abc")
    D.keys() 　返回可迭代的 dict_keys 集合对象
    D.values() 返回可迭代的 dict_values 值对象
    D.items() 　返回可迭代的 dict_items 对象 #返回元组形式的对象
    d = {0:'零',5:'伍',8:'捌',3:'叁'}
    for k ,v in d.items():　　＃for 后面跟两个对象或多个对象，表明返回来的是一个序列
        print(k,v)
        #0 零
        ５　伍
        ８　捌
        ３　叁

字典推导式
    字典推导式是用可迭代对象一次生成字典内元素的表达式
语法：
    {键表达式:值表达式 for 变量 in 可迭代对象[if 真值表达式]}**************************
    注:[]代表内部的内容可以省略
示例:
    生成一个字典,键为数字(1~9),值为键的平方
    d = {x:x**2 for x in range(1,10)}
    #{1:1,2:4,3:9,4:16,5:25,6:36,7:49,8:64,9:81}
练习:
    有如下字符串列表:
    L=['tarena','xiaozhang','hello']
    请生成如下字典
    d = {'tarena':6,'xiaozhang':9,'hello':5}
    d = {x:len(x) for x in L}

练习２：
    已知有两个等长的列表:
    list1 = [1001,1003,1008,1004]
    list2 = ['Tom','Jerry','Spike','Tyke']
用list2中的元素作为键,用list2中对应的元素作为值，生成如下字典
    d = {'Tom':1001,'Jerry':1003,'Spike':1008,'Tyke':1004}
    方法１：
    d = {}
    for i in range(len(list1)): #通过索引来给字典添加元素
        d[list2[i]]= lis1[i]
    方法２：
    for k in list2:
        d[k] = list1[list2.index(k)]

    方法３:
    d  = {list2[i]:list[i] for i in range(len (list1))}

    方法4:
    d = {k:list1[]list2.index(k)for k in list2}
字典推导式的嵌套
    语法规则同列表推导式
字典vs列表
    1.都是可变对象　　
    2.索引方式不同,列表用整数索引,字典用键索引
    3.字典的插入,删除,修改的速度可能会快于列表（重要)**********
    4.列表的存储是有序的，字典的存储是无序的

day15回顾:
  生成器
    动态提供数据的对象(现用现生成)
  两种 生成器
    1.生成器函数
      def myyield():
        yield x #生成的数据是给next(it)函数
      yield语句:
        yield表达式
      访问生成器的方式:
        1.迭代器
        2.for in循环语句
    2.生成器函数
      语法:
        (x ** 2 for x in range(10))

  迭代工具函数:
    zip(可迭代对象1,可迭代对象2,..)
    enumerate(可迭代对象,start=0) (索引,值)

字节
  1字节(byte) = 8个位 (bit)
字节串 bytes 和字节数组 bytearray
字节串:
  创建 
    字面值:
      b'
    构造函数
      bytes()
      bytes(10)
      bytes(range(65,70))
      bytes("ABCD".'utf-8')
字节数组
  创建:
    构造函数bytearray
      与字节串一致
bytes和bytearray的运算:
  + += * *=
  < <= > >= == !=
  in/not in 
  索引/切片
  函数:
字符串和字节串互转
  b = s.encode('utf-8')
  s = b.decode('utf-8')
  ba = bytearray(b'1234')
  s2 = ba.decode()
字节数组的方法:
  B.clear() 清空
  B.append(n) 追加
  B.remove(value)
  ...
-------------------------------------------------------------
day16笔记
文件File
  文件是用于数据存储的单位
  文件通常用来长期存储数据
  文件中的数据是以字节为单位进行顺序存储
文件的操作流程:
  1.打开文件
  2.读/写文件
  3.关闭文件
  注:任何的操作系统,一个应用程序同时打开文件的个数有最大数限制
文件的打开函数:
  函数:
    open(filename,mode = 'rt')作用打开一个文件
  参数:
    filename文件的路径名字符串(可以是绝对路径和相对路径)
    mode 打开模式:
      'r'只读
      'w'只写
      't'文本
      ...
  返回值:
    文件流对象
  说明:
    打开文件出错时会触发OSError类型的错误!
文件的关闭方法:
  方法名:
    f.close()
文本文件读方法:
  F.read(n) #读取n个字符数据(文本方式)或字节数据(二进制方式)
            #当督导文件尾返回空字符串或字节串
  F.readline() #读取一行,以'\n'结束
  F.readlines() #读取多行,返回列表

文本文件的写操作
  方法:
    f.write(字符串或字节串)
  作用:
   写入字符串(文本文件操作)或字节串(二进制文件操作)到文件中
  返回值:
    成功写入的字符个数或字节个数
  方法2:
    f.writelines(字符串或字节串列表)
  
  打开模式:
    'w'只写并创建文件,删除原有文件内容(如果文件不存在，则创建该文件并以只写方式打开)
    'x'只写,只创建新文件,文件存在则报错,FileExistsError错误
    'a'追加方式写文件,如果有原文件则追加到文件末尾

文本文件操作:
  模式字符:'t' (默认)

说明:
  1.对文本文件的读写要用字符串(str)进行读取和写入数据
  2.默认文件中存储的都为字符数据,在读写中会自动进行编码转换
  3.以行为单位分隔,在python内部统一用'\n'作为换行符进行分隔

各操作系统的换行符:
  Mac OS X / Linux换行符: '\n'
  windows换行符: '\r\n' #在Python中读不到\r,会在linux中自动转为\n

文件的迭代读取:
  文件流对象是可迭代对象,迭代过程将以换行符'\n'作为分隔符依次获取
  示例:
    f =  open("myfile.txt")
    for line in f:
        print(line)  #每次line绑定一行数据
    f.close()

标准输入输出文件:
  模块:sys
  sys.stdin   标准输入文件(默认是键盘)
  sys.stdout  标准输出文件(默认是终端输出)
  sys.stderr  标准错误输出文件(默认是终端输出)
  示例:
    stdout.py
  说明:
    标准文件不需要打开和关闭就可以直接使用

二进制文件操作
  二进制文件模式字符:'b'

什么是二进制文件操作:
  默认文件中存储的都是以字节(byte)为单位的数据,通常有人为的格式
  说明:
    对二进制文件的读写需要用字节串(bytes)进行操作
    F.tell()返回当前文件流读写指针的绝对位置(字节为单位)
F.seek方法:
    F.seek(offset, whence=0)
  作用:
    设置文件的读写位置
  方法:
    F.seek(偏移量,whence=相对位置)
    参数:
      偏移量:
        大于0的整数代表向文件末尾方向移动
        小鱼0代表向文件头方向移动
      相对位置:
        0 代表文件头开始偏移
        1 代表从当前位置开始偏移
        2 代表从文件尾开始偏移
      示例:
        seek.py
F.flush() 方法:
  作用:
    清空(清倒)缓冲区
    F.flush() 把写入文件对象的缓存内容写入到磁盘

汉字编码:
  两种(常见的):
    国标系列:
      GB18030(二字节或四字节编码,27533个汉字)
        GBK(二字节编码,约21003个字)
          GB2312(二字节编码,约7千汉字))
      (Windows常用)
    国际标准:UNICODE <----->  UTF-8
      (Linux/Unix/Mac os )

UTF -8 (8-bit UNICODE Transformation Format)
  UNICODE<------>  UTF-8
  0x0000-0x7f   1字节编码(与ASCII兼容)
  0x0080-0x07FF 2字节编码
  0x07FF-0xFFFF 3字节编码 (汉字落在此区)
  0x10000-之后   4,5,6字节编码(UNICODE32部分)

python的编码(encode)字符串:
  'gb2312'
  'gbk'
  'gb18030'
  'utf-8'
  'ascii'
  ...0

编码注释:
  在python源文件的第一行或第二行写入如下内容是编码注释
  编码注释的作用是告诉解释执行器当前文件的编码类型是什么
  如:
    # -*- coding:gbk -*-
    #告诉python解释执行器,当前文件的编码是:gbk
    或
    #-*- coding:utf-8 -*-



  
      
        
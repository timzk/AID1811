day13笔记
  自定义模块
    xxx.py 
    导入方式：
        import 
        from import 
        from import *
    搜索路径顺序:
      1.查找内建模块
      2.查找当前工作路径
      3.查找sys.path里指定的路径中
    xxx.py ---->xxx.pyc--->python3
    预置的变量(属性)
      __doc_ #绑定文档字符串
      __name__#绑定模块名,当为主模块时绑定'__main__'
      __file__ #绑定模块的文件路径名
      __all__列表　
      __all__ = ['var1','var2']
      在用from import *语句时,只导入列表中的变量(属性)
    隐藏属性
      以_开头的全局变量为隐藏属性
      　　from import * 语句

  包
    模块以文件夹形式包含为一个整体,包含有一系列的模块或子文件夹

    导入语句
      绝对导入
      import语句
      　　import mypack.games.contra [as c] 
      from import 语句 
         from mypack.games.contra import play
      from import *语句
         from mypack.games.contra import *
      相对导入
      from .import context
      from .. office.word import *
      __init__.py
        实现包的内容
        __all__列表 限制from import *语句的操作

  两个模块
    sys模块
      sys.platfrom #操作系统平台的信息'linux','win32'
      sys.version /sys.version_info 
      sys.argv  #命令行输入的内容
      sys.path #　模块的搜索路径
      sys.exit() 退出程序
      sys.getrecursionlimit()#得到最大的递归深度
      sys.setrecrusionlimit(v) #设置深度

    random模块
      random.random()
      random.randomint(a,b)
---------------------------------------------------------------------
day14笔记
异常(基础) exception

什么是错误
  错误是指由于逻辑或语法等导致一个程序无法正常执行的问题
错误的特点:
  有些错误无法预知
什么是异常
  异常是程序出错时标识的一种状态
  当异常发生时,程序不会再向下执行,而转去调用此函数的地方处理
  此错误并恢复为正常状态
作用:
  用于信号,通知上层调用着有错误产生需要处理
try 语句的两种语法
  try-except语句
  try-finally语句

try-except语句的语法
  try:
    可能触发异常的语句
  except错误类型1[as 变量1] #as绑定错误对象 ,把Traceback里的内容打印出来
    异常处理语句1
  except错误类型2[as 变量2]
    异常处理语句2
　except(错误类型3,错误类型4)[as 变量3] #把错误类型放到一起
    异常处理语句3　
  ....
  except:  #如果上面所有类型都不匹配,执行此句
    异常处理语句other
  else:#此子句只有在div_apple没有发生异常时才会执行
    未发生异常的语句(此语句在未发生异常时执行)
  finally:
    最终语句(此语句在离开try时一定会被执行,可用作释放资源)

作用:
  尝试捕获异常,得到错误通知,将程序由异常流程转为正常流程并继续执行
说明:
  as 子句是用于绑定错误对象的变量,可以省略
  except子句可以有一个或多个,但至少要有一个
  else 子句最多只能有一个,也可以省略不写
  finally子句最多只能有一个,也可以省略不写
示例见:
  try_except.py
python3中内建的全部的错误类型
  参见文档:
    python_base_docs_html/python全部的异常类型.html

try-finally语句
  语法:
    try:
      可能出发异常的语句
    finally:
      最终语句
  说明:
    finally子句不可以省略
    一定不存在excep子句
  作用:
    通常用try-finally语句来执行触发异常时一定要执行的语句
      无论异常是否发生,finally子句都会被执行
    try-finally语句不会改变程序的(正常/异常)状态
  示例:
    try_finally.py

raise语句
  作用:
    触发一个错误,让程序进入异常def input_student():
    发送错误通知给调用者
  语法:
    raise 异常类型
    或
    raise 异常对象   error = Vadef input_student():
    
    error("xxx大街yyy号着火了")
    或
    raise #重新触发上一次异常 可以把上次的错误继续往下传递,直到被截获
  说明:
    raise 无参调用通常用于try-except的except子句中
  示例:
    raise.py

assert语句(断言语句)
  语法:
    assert真值表达式,错误数据(通常是字符串)
  作用:
    主动检测错误并尽早触发错误
  说明:
    当真值表达式为False时,用错误数据创建一个AssrtionError类型错误,并进入异常状态
  等同于:
    if bool(真值表达式) == False:
        raise AssertionError(错误数据)
  示例:
    assert.py

异常小结:
  4条异常处理语句:
    try-except 语句
      作用:用来接收错误通知并处理错误(异常转正常)
    try_finally 语句
      作用:执行必须要执行语句(不会转换程序的状态)
    raise 语句
      作用:发送错误通知,让程序进入异常流程
    assert 语句
      作用:根据条件发送AssertionError类型的异常通知,让程序进入异常流程
为什么要用异常处理机制
  在程序调用层数较深时,向主调函数传递错误信息需要层层return
  返回比较麻烦,所以需要异常处理机制
  示例:

能用到异常的地方
迭代器 iterator
  什么是迭代器
    迭代器是访问可迭代对象的工具
    迭代器是指用iter(obj)函数返回的对象(实例)
    迭代器可以用next(it)函数获取可迭代对象的数据
  
  迭代器相关的函数
    iter(iterable)从可迭代对象中返回一个迭代器,iterable必须是一个能提供迭代器的对象
    next(iterator)从迭代器iterator中获取下一个记录,如果无法获取下一条记录,则会触发StopIteration异常通知
    说明:
      迭代器只能往前取值,不会后退
      用iter函数可以返回一个可迭代对象的迭代器
    示例:
      L = [1,3,5,7]
      it = iter(L) #从对象L中获取迭代器,然后用it变量绑定
      next(it) #1
用迭代器函数iter,和next 访问可迭代对象的示例:
      L = [2,3,5,7]
      it = iter(L)
      while True:
          try:
              x = next(it)
              print(x)
          except StopIteration:#当截获StopIteration错误后执行break
              break  

------------------------------------------
day16回顾
  文件File
    长期存储数据
    以字节为单位进行顺序存储
  文件的操作步骤
    1.打开:open('文件名','rbaw')
    2.读写
        读:
          F.read(n)
          F.readline()
          F.readlines()
        写:
          F.write(字符串或字节串)
          F.writelines(字符串或字节串列表)
    3.关闭
      F.close()
  两种操作方式:
    文本文件操作
      打开模式:'t'
      自动进行编码(write)/解码操作(read)
      默认将'\r\n'转为'\r'  Windows下创建的文件默认是用的GBK编码
    二进制文件操作
      打开模式:'b',Windows下创建的文件默认是用的GBK编码
        不会自动编解码,会把文件当成字节串来看待
  其他方法:
    F.tell()
    F.seek(偏移量,相对位置)
    F.flush()清空缓冲区
    缓冲区的作用是较少对外部(I/O,输入输出)的次数

  汉字的编码:
    GB国标
      GB18030
      GBK
      GB2312
    UNICODE国际标准

  编码字符串:
    GBK2312
    GBK
    GB18030

  编码注释
  # -*- coding:utf-8 -*-


day17笔记
面向对象编程 Object-Oriented Programming
什么是对象
  对象是指现实中的物体或实体(Object)
面向对象:
  把一切看成对象(实例/实体/物体),用各种对象之间的关系来描述事物

对象都有什么特征:
  对象有很多属性(名词,量词等)
    姓名,年龄,性别...
  对象有很多行为(动词,动作)
    学习,吃饭,睡觉,踢球,工作

类
  拥有相同属性和行为的对象分为一组,即为一个类
  类是用来描述对象的工具,用类可以创建此类的对象(实例)

示意:
  车
  int(类) --->100(实例,对象)

类的创建语句(class 语句)
  语法:
    class 类名(继承列表):
      '类的文档字符串'
      实例方法定义
      类变量的定义
      类方法(@classmethod)定义
      静态方法(@staticmethod)定义
  作用:
    创建一个类
    类用于描述对象的行为和属性
    类用于创建此类的一个或多个对象(实例)
  说明:
    继承列表可以省略,省略继承列表表示继承自object类
    类名必须是标识符
    类名实质是变量,它绑定一个类(不要轻易对其赋值)

  示例见:
    mycalss.py

构造函数
  构造函数用的表达式语法:
    类名([创建传参列表])
  作用:
    创建这个类的实例对象,并返回此实例对象的引用关系
  示例见:
    constructor.py
类           |   对象(实例)    
class        |   Object(instance) 

实例说明:
  实例有自己的作用域和名字空间,可以为该实例添加实例变量(也叫属性)
  实例可以调用类方法和实例方法
  实例可以访问类变量和实例变量

h1 = Human()   #h1就是实例
实例的方法(instance method)
  定义语法:
    class 类名(继承列表):
        def 实例方法名(self,形参1,形参2,...)
          语句块
  作用:
    用于描述一个对象的行为,让此类型的全部对象都拥有相同的行为
  说明:
    实例方法的实质是函数,是定义在类内的函数
    实例方法至少有一个形参,第一个形参绑定调用这个方法的实例,
      一般命名为'self'
  调用语法:
    实例.实例方法名(调用传参)
    或
    类名.实例方法名(实例,调用传参)
  示例:
    instance_method.py
    class Dog():
        def eat(self,food): #方法
            print("小狗正在吃",food,self)
        def sleep(self,hour):
            print("小狗睡了",hour,'小时')
        def play(self,obj):
            print("小狗正在玩",obj)
    dog1 = Dog() #用Dog类来创建一个Dog类型的对象dog1,然后对象dog1就拥有了类里面的所有方法,也叫创建实例
    dog1.eat('骨头')
    dog1.sleep(1)
    dog1.play("球")

实例的属性 instance attribute(也叫实例变量)
  每个实例可以有自己的变量用来记住自己的数据,称为实例属性

  属性的使用语法
    实例.属性名
  属性的赋值规则:
    首次为属性赋值则创建此属性
    再次为属性赋值则修改属性的绑定关系
  作用:
    记录每次对象自身的数据
  示例:
    attribute.py

删除属性:
  del 语句可以删除对象的属性
  语法:
    del 对象(实例).实例属性名
  示例:
    class Dog:
        pass
    dog1 = Dog()
    dog1.color = '白色'
    print(dog1.color) #白色
    del dog1.color
    print(dog1.color) #出错,没有这个属性
------------------------------------------------------
    class Human:
        def set_info(self,name,age,address='不详'):
            self.name = name
            self.age  = age
            self.address = address
            
        def show_info(self):
            print(self.name,'今年',self.age,'岁,家住:',self.address)
    h1 = Human()
    h1.set_info('小张',20,'成都')
    h2 = Human()
    h2.set_info('小李',18)
    h1.show_info()
    h2.show_info()
---------------------------------------------------------
    class Car:
        '''此类定义一个小汽车类'''
        def __init__(self,c,b,m): #初始化定义
            self.color = c
            self.brand = b
            self.model = m
            print("__init__初始化方法被调用")
        def run(self,speed):
            print(self.color,'的',self.brand,self.model,'正在以',speed,'公里/小时的速度行驶')
    a4 = Car("红色",'奥迪','A4')
    a4.run(199)
    t1 = Car('黑色','Tesla','Model X')
    t1.run(200)        

初始化方法:
  作用:
    对新创建的对象添加属性
  语法格式:
    class 类名(继承列表):
      def __init__(self[,形参列表]):
        语句块
    注:[]代表其中的内容可省略
  说明:
    1.初始化方法名必须为 __init__ 不可改变
    2.初始化方法会在构造函数创建实例后自动调用,且将实例自身通过第一个参数self传入__init__方法
    3.构造函数的实参将通过__init__方法的形参列表传入到__init__方法中
    4.初始化方法内如果需要return语句则必须返回None
  示例:
    init_method.py
---------------------------------------------------
    class Car:
        '''此类定义一个小汽车类'''
        def __init__(self,c,b,m): #初始化定义
            self.color = c
            self.brand = b
            self.model = m
            print("__init__初始化方法被调用")
        def run(self,speed):
            print(self.color,'的',self.brand,self.model,'正在以',speed,'公里/小时的速度行驶')
    a4 = Car("红色",'奥迪','A4')  # 同Car("红色",'奥迪','A4').run(199)道理一样
    a4.run(199)
    t1 = Car('黑色','Tesla','Model X')
    t1.run(200)

析构方法:(不常用)
  语法:
    class 类名:
        del __del__(self):
            语句块
  作用:
    经常用于释放对象所占用的资源(如对象打开的文件等)
  说明:
    析构方法将在对象被销毁前自动调用
    python 语言建议不要在对象销毁时做任何事情,因为销毁的时间难以确定
  示例:
    del_method.py

预置的实例属性
__dict__属性
  __dict__属性绑定一个存储此实例自身变量的字典

  示例:
    class Dog:
        pass
    dog1 = Dog()
    print(dog1.__dict__) #{}
    dog1.color = '白色' 
    print(dog1.__dict__) #{'color':'白色'}

__class__属性
  __class__属性绑定创建此实例的类

  作用:
    可以借助此属性来访问创建此实例的类
  示例:
    class Dog:
        pass
    dog1 = Dog()
    print(dog1.__class__) #此时dog1就拥有Dog的类属性
    print(dog1.__class__ is Dog)  #True
    dog2 = dog1.__class__() #创建一个dog1的同类对象,属于同一类型
    print(dog2.__class__)

用于类的函数:
  isinstance(obj,class_or_tuple)返回这个对象obj是否是某个类class或某些类(tuple中的类)
                                的实例对象,如果是返回True,否则返回False

  type(obj) 返回obj这个对象的类

  示例:
    isinstance(100,int) #True
    isinstance("hello",str) #True
    class Dog:
        pass
    dog1 = Dog()
    isinstance(dog1,Dog) #True
    isinstance(3.14,(Dog,int)) #False
    isinstance(3.14,(Dog,int,float)) #True  #可以为多个类,(tuple中的类)
day10回顾:
    全局变量
      模块内，函数外的变量
      一但创建，不会自动销毁,需要用del语句销毁
    局部变量
      在函数调用时(过程中)创建,自动销毁
    globals 
      返回全局变量的字典
    locols
      返回局部变量的字典
    函数变量
      函数名是变量，在创建时绑定一个"函数"
      函数可以作为形参传入另一个函数
      函数可以作为另一个函数的返回值
      函数嵌套定义
      def f1():
        def f2():
          print("hello")
        return f2
      fx = f1() #f1()打来括号,绑定的f1的return返回值
      fx()
      示例2
        def fn(fx):
          print("fn被调用")
          return fx
        m = fx(max)
        print(m(1,2,3))
    作用域
      局部
      外部嵌套函数作用域
      全局(模块内)
      内建(内置)函数作用域
    globbal 语句
      声明 为全局作用域
        global v
    nonlocal 语句
      声明为外部嵌套函数作用域

    lambda 表达式
      创建函数的表达式
      主要是用来创建简单函数
      lambda x,y,*args,**kwargs:x+y+max(args)

    eval 函数
      把字符串当成"表达式"来运行,返回表达式的运算结果
    exec
      把字符串当成 python 语言的程序来运行
-------------------------------------------------------------------------
day11笔记
函数式编程 functional programming
  函数是编程是指用一系列函数解决问题
  说明:
    用每一个函数完成细小的功能,一系列函数任意组成可以解决大问题
    函数仅接收输入并产生输出,不包含任何能影响输出的内部状态

函数的可重入性
  当一个函数没有访问除局部变量以外的变量,则此函数为可重入性函数
  特点：
    输入一定,结果必须一定
  示例:以下可重入函数
    def myadd(x,y):  #此函数没有访问全局或外部嵌套函数的变量
        print(x+y)
    print(myadd(100,200))
  示例2:不可重入函数
    s = 0 
    def myadd(x,y):
        print(x + y +s) # s为全局变量
    print(myadd(100,200))
高阶函数　High Order Function 
  什么是高阶函数:
    满足下列条件中一个的函数即为高阶函数
      1.函数接收一个或多个函数作为参数传入
      2.函数返回一个函数

python 内建的高阶函数
　　map  filter sorted

map函数:
  格式:
    map(func,iterable1,iterable12)
  作用:
    用iterable1,iterable2中取出的数据用func处理后返回处理后的结果
  参数:
    func 数据处理函数
    iterable1,iterable12 可以迭代对象
  返回值:
    可迭代对象
  示例:
    def power2(x):
        return x ** 2
    for x in map(power2,range(1,10)): #不加括号是指调用power2的引用关系
        print(x) #打印1-10的平方,(1,4,6...)
  说明:
    func函数的形参列表的形参个数与map函数中可迭代对象的个数相关,一般func函数的形参个数等于map函数中的可迭代对象个数
    def power2(x):
        return x ** 2
    for x in map(power2,range(1,10),[5,4,3,2,1]): #错误,因为power2中只有一个形参
        print(x)
  示例:
    生成一个可迭代对象,此可迭代对象可以生成:
    1**4,2**3,3**2,4**1
    pow(1,4) ＃4, pow(x,y)为内建函数,作用就是求x的y次方
    for x in map(power2,[1,2,3,4],[4,3,2,1]):
    print(sum(map(lambda x:x**2,range(1,10)))) #求1**1..1**9的和
    i = 0
    for x in map(pow,range(9,0,-1),range(1,10)):
        i += x
    print(i)    #求1**9...9**1的和

filter　函数
  格式:
    filter(func,iterable1) 
  作用:
    创建一个可迭代对象,此可迭代对象将用func函数对iterable中的数据进行筛选
  参数:
    func 筛选函数,有一个形参,通常返回True / False
    iterable1 原始的可迭代数据
  返回值:
    可迭代对象,如果成立True则返回
  示例:
  def isodd(x):
    '''此函数判断x是否为奇数，如果为奇数返回True'''
    return x % 2 == 1
  L = list(filter(lambda x:x%2 ==0,range(10)))
  print(L)  #此示例用作筛选１０以内的偶数的列表

sorted函数：
  作用:
    将原可迭代对象的数据进行排序,生成排序后的列表
  格式:
    sorted(iterable1,key=None(可以自己定义一个函数),reverse=False)
  参数:
    iterable1可迭代对象
    key 函数,用来提供一个排序的依据值,默认用原值进行比较
        key函数传入的是要比较的数据对象,返回值为能进行比较的值
    reverse标志用来设置是否降序排序
  返回值:
    排序后的列表
  示例:
    L = [5,-2,-4,0,3,1]
    L2 = [sorted(L)] #L2 =[-4,-2,0,1,3,5]
    L3 = sorted(L,reverse = True) #[5,3,1,0,-2,-4]
    L4 = sorted(L,key = abs) #abs为取绝对值
  key 函数的格式:
    def XXXX(a[需要比较的数据])：
        return a的依据

  示例:此示例用长度来排序,用到len函数
    names = ['Tom','Jerry','Spike','Tyke']
    L2 = sorted(names,key = len)  

--------------------------------------------------------------------
小结:
  三个高阶函数
    map(func,可迭代对象1,可以迭代对象2)
        对一个或多个可迭代的数据处理
    filter(func,可迭代对象)
        过滤
    sorted(可以迭代对象,key=函数,reverse=False)
        排序

递归 Recursion
  递归是指函数直接或间接的调用自身
  示意:
    def f():
        f() 
    def fa():
        fb()
    def fb():
        fa()
    fa()#　间接调用
说明: 
  递归一定要控制递归的层数,当符合一定条件时要终止递归
  几乎所有的递归都能用while循环来代替
递归分为两个阶段:
  递推阶段:
    从原问题出发,按递归公式,从未知到已知,最终返回
  回归阶段:
    按递归终止条件,逆向代入递归公式，回归到原问题求解
问题:
    局部变量在什么时候会自动销毁?
      函数结束后才自动销毁(如果函数尚未结束,则局部变量不会销毁)
    同一个函数能有几个局部变量?
      调用几次就有几个局部变量
示例:
def fx(n):
    print("递归进入第",n,'层')
    if n==3:
    fx (n+1)
    print("递归退出第",n,'层')
fx(1)
print('程序结束')
#阶乘公式(n!):
  1         当n ==0
  n*(n-1)!  当n>0
  def myfac(n):
    if n == 0:
        return 1
    s = n * myfac(n-1)
    return s
  myfac(5)
  #求100以内的每个数的和
    def mysum(n):
        if n ==1:
            return 1
        return n+mysum(n-1)
    print(mysum(100))
递归的优缺点:
  递归一定要控制递归的层数,当符合某一条件时要终止递归调用
  优点:
    递归可以把问题简单化,让思路更加清晰,代码更简洁
  缺点:
    递归因系统环境影响大,当递归深度太大时,可能会得到不可预知的结果

闭包 closure
  什么是闭包
    闭包是指引用了此函数外部嵌套函数的变量的函数
  闭包必须满足三个条件:
    1.必须有一个内嵌函数
    2.内嵌函数必须引用外部函数中的变量
    3.外部函数返回值必须是嵌套函数
  思考:
    全局变量和局部变量的区别?
      全局变量
        一直存在,谁都可以访问和修改
      局部变量
        函数调用时存在,只能在函数内部进行访问和修改
  示例:
    def give_yasui_money(m):
      money = m
      def child_buy(obj,m):
          global money
          if money > m:
            print('买',obj,'花了',m,'元')
            money -= m
          else:
            print("买"，obj,'失败')
      child_buy('变形金刚',200)
    cb = give_yasui_money(1000)
    cb('买变形金刚',200)
  闭包的优缺点:
    优点:
      加强封装性,用内部嵌套函数可以使用函数之外的变量而不会被破坏
    缺点:
      由于闭包会使得函数中的变量都被保存在内存中,内存消耗量大,所以不能滥用闭包
  示例2:
  def make_power(y):
      def fn(x):
          return x ** y
      return fn 
  pow2 = make_power(2) #pow2绑定闭包函数 ,平方
  print(pow2(3))  #9
  print(pow2(4))  #16

  pow5 = make_power(5) #pow5绑定闭包函数,5次方
  print(pow5(2)) #32
    
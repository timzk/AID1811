day02回顾
1.tcp传输的一些问题
  *传输特征
  *网络缓冲区
  *粘包
2.UDP传输
  服务端  创建套接字-->绑定地址-->发送接收-->关闭
  客户端  创建套接字-->收发消息-->关闭
3.套接字属性
  fileno()
  getpeername()
  setsockopt()
4.广播
5.http协议
* 获取一个网页的过程
* http请求
        请求行:具体的请求类别和请求路径
        格式: GET    /    HTTP/1.1
             类别   内容   协议版本
        请求头:
        空行
      请求体:请求参数或者提交内容

------------------------------------------------------------
day03笔记

http响应(response)
  响应格式:
    响应行: 反馈基本的响应情况
      格式:HTTP/1.1   200       OK
           协议版本   响应码    附加信息

           响应码:代表不同的响应情况
           1xx   提示信息,表示请求被接受
           2xx   响应成功
           3xx   响应需要进一步操作,重定向
           4xx   客户端请求错误
           5xx   服务器未知异常
    响应头:对响应信息的基本描述
      空行
    响应体:要给客户端回发的内容

要求:1.什么是http协议,是哪一层的,用tcp传输还是udp
    2.http协议常见的应用场景
    3.网页获取的流程
    4.http协议请求和响应的格式,及每部分功能
    5.常见的请求类型和响应码含义

IO类型
在内存中存在数据交互的操作都认为是IO操作
和终端交互: imput print
和磁盘交互: read  write pymysql
和网络交互: recv  send 

计算密集型程序(cpu密集):程序中计算较多,IO操作较少,CPU消耗大,运行速度快
IO密集型程序:在程序执行中存在大量IO操作,而CPU运算较少,CPU消耗很低,耗时较长

I/O分类
 阻塞I/O  非阻塞I/O  I/O多路复用  
阻塞I/O是I/O的默认形态,是效率较低的一种IO情形 accept也是一种阻塞IO
    阻塞情况:
    ** 因为某种条件没有达成造成的函数阻塞
      e.g. accept recv recvfrom input output
    ** 因为处理IO时间较长形成的阻塞行为
      e.g. 网络延迟  大文件读写

非阻塞I/O 
   ** 将原本阻塞的IO函数通过设置属性使其变为非阻塞
   sockfd.setblocking(bool)
   功能: 将套接字设置为非阻塞IO
   参数:默认为True 表示阻塞状态
       设置为False 则表示为非阻塞状态则sockfd调用函数时不阻塞
    ** 超时检测:即设置一个最长的等待时间,超时则不再阻塞等待
    sockfd.settimeout(sec)
    功能:设置套接字的超时检测时间
    参数:时间 秒

    *在阻塞状态下设置超时检测
    socket.timeout异常

I/O多路复用
  定义:同时监控多个I/O事件,当哪个IO事件准备就绪就执行哪个I/O事件,以此形成可以同时操作多个I/O的行为
      避免一个I/O阻塞造成其他IO都不可执行的形态,提高I/O运行效率
  就绪I/O:表示一种临界状态,即该IO已经发生,由内核交由应用程序处理

  具体方案:
      1.系统支持
        select:Windows Linux Unix
        poll:Linux Unix
        epoll:Linux
      2.python 
        import select 模块

select 方法
  rs, ws, xs = select(rlist, wlist, xlist[, timeout])
  功能:监控IO事件,阻塞等待IO事件发生
  参数:rlist  列表  (想要监控的读IO事件,read)(想要关注的等待发生的IO事件)
      wlist  列表  写 (想要关注的可以主动处理的IO事件) 
      xlist  列表  想要关注的出现异常去处理的IO
      timeout  超时时间
  返回值: rs  列表 rlist 中准备就绪的事件
         ws  列表 wlist 中准备就绪的事件
         xs  列表 xlist 中准备就绪的事件

  基于select IO多路复用的tcp服务端

    步骤: 1.将关注的IO放入对应类别的列表
         2.通过select函数进行IO监控
         3.当IO事件发生时遍历select返回值列表
         4.处理发生的IO事件
   
   注意:wilst  中如果有IO事件则会立即返回到返回值中
       在IO处理中不宜出现死循环等长期占有服务端的情况
       IO多路复用占用计算机资源较少,效率较高

位运算转换位2进制
  &  按位与   11&14   1010  10   一0则0
  |  按位或   11|14   1111  15   一1则1
  ^  按位异或                    相同位0  不同为1
  << 左移                       向左移动右侧补位0
  >> 右移                       向右移动去掉低位

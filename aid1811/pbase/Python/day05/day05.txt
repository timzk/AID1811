day05
for 语句
　作用:
    用来遍历（经历且只经历一遍）可迭代对象的数据元素

可替代对象是指依次获取数据元组的对象
　可迭代对象包括:
    字符串　str
    列表 list
    元组tuple
    字典dict
    集合set
语法:
　for　变量列表 in　可迭代对象:
　　　　语句块1
　else:
　　　　语句块2
说明：
　１.　可迭代对象每次提供一个元素依次赋值给变量列表中的变量,赋值完毕后执行语句块1，重复执行此步骤,直到可迭代对象不能
　　   提供数据为止
　２． 可迭代对象迭代完所有的元素后,执行else子句部分的语句块2，然后推出循环
  3． else子句部分可以省略不写（同while类似)
  4.当在循环内部用break终止循环时,else子句不会执行

range 函数
　函数　　说明：
  range(stop) 用来生成0-stop区间内打整数,直到stop为止，不包含stop
  range(start,stop,step)用来生成start~stop区间内的整数,直到stop为止（不包含stop)，
  　　　　每个整数间隔step（step可以为负数,但不可以为０）
  作用：用来创建一个生成一系列整数的可迭代对象（也叫整数序列生成器）
  说明：此函数调用返回回来的对象可以用于for语句取值，只会调用一次
  示例：
   range(4)    　#生成０，１，２，３
   range(3,6)  　#生成3,4,5
   range(1,10,2) #生成1,3,5,7,9
   range(5,0,-2) #生成5,3,1　倒着来，但是不包括stop
   range(4,0) 　　#空
比如：for x in range(1,10,3):  得到：１ 4 7
   for语句的注意事项,stop是不可改变的，一旦创建不可改变
   1.　for中range的调用次序:
   　　stop是不可改变打，且range只会被创建一次
   ２．range(4,0) 　　根本不会被调用，因为条件不成立，stop不能为０

for语句嵌套:
    与while一样,for语句是语句（复合语句）,他可以嵌套到其他复合语句中
    示例：　
    　for x in "ABC":
        for y in  123"":
           print(x+y)   #输出A1A2A3B1B2B3
continue语句:
    问题:如何让程序不再往下执行，重新开始一次新的循环
    作用:
        用于循环语句（while,for语句）中,不再执行本次循环内continue之后的语句,重新开始一次新的循环
    说明:
        １．在for语句中执行continue语句,将会从可迭代对象中取下一个元素,绑定变量后再进行循环
        ２．在while语句中执行continue语句,将会直接跳转到真值表达式处,重新判断循环条件
    语法:
    　　continue
    
循环小结：
    while　语句
    for语句
        字符串str
        range()调用后打返回值
    break 语句（终止循环）
    continue语句 (开始一次新的循环)

列表　list
    问题:
        如何将计算机运行的数据临时存入一个地方,同时又方便添加,删除,修改
什么是列表:
    列表是一种容器
    列表是可以被改变的序列
    列表是由一系列特定元素组成，元素与元素之间没有任何的关联关系他们之间有先后顺序关系
python序列类型简介
    字符串　str
    列表 list
    元组　tuple
    字节传 bytes
    字节数组 bytearray

创建空列表的字面值
    []创建空列表
    如 L=[] #Ｌ绑定一个空列表
    创建非空列表的字面值
    L＝[1,2,3,4]
    L=['beijing','shanghai']
    L=[1,2,[3.1,3.2],4]
列表的构造函数list
    list()　生成一个空的列表,等同于[]
    list(iterable)用可迭代对象创建一个列表
    示例:
    　Ｌ＝list()　＃Ｌ绑定空列表
　　　Ｌ=list("hello") #L绑定['h','e','l','l','o']
     L＝list(range(１，１０，２))　＃Ｌ绑定［１，３，５，７，９］
列表的运算:
    算术运算:
    (＋,+=,*,*=,)
    　+用于拼接列表
    　x=[1,2,3,4]
    　y=[5,6,7]
    　z=x+y  #z=[1,2,3,4,5,6]
    　+=用于将右侧可迭代对象的数据追加在原列表数据之后
    　　语法:
       x+=可迭代对象
      　如：
       x= [1,2,3]
       x+=[4,5,6]  #[1,2,3,4,5,6]
       x +="ABC"  #[1,2,3,4,5,6,A,B,C]
       x +=range(10,13)#[1,2,3,4,5,6,A,B,C,10,11,12]
       注：不同于字符串str，str是绑定不可变，重新创建一个对象，列表是可变容器,+=会改变原列表
    　*生成重复的列表
    　　x＝[1,2]*3  #[1,2,1,2,1,2,]
    　*=用于生成重复的列表
        x=[1,2,3]
        X*=2  # [1,2,3,1,2,3]
        y=2
        y*=[1,2] #[1,2,1,2,1,2]
    列表的比较运算:
    　　运算符:
    　　　＜　＜＝　＞　＞＝　＝＝　！＝
       说明:
       　列表的比较规则与字符串的比较规则相同
       　列表要求每两个元素能一次进行比较,否则会出现类型错误
       示例：
       　x=[1,2,3]
         y=[2,3,4]
         x!=y #True
         x<y   #True
         [1,2,3]<[1,3,2]  #True
         [1,2]>[1,2,3] #false
         [1,2]<[2,'er']  #True 因为只比较第一个
    列表是可迭代对象:
        L= [1,3,5,10]
        for x in L:
         print(x)      #1,3,5,10      
    列表的in /not in 运算符
        判断一个值是否存在于列表中,如果存在返回True,否则返回False
        同字符串的in　运算符,用于检查一个值是否存在于列表中

        示例：
        　x＝[1,'two',3,'四']
         3 in x  #True
         4 in x  #false
         5 not in x  #True
         1 not in x  #false 
